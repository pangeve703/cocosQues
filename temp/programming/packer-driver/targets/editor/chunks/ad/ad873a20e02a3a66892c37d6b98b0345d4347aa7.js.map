{"version":3,"sources":["file:///Users/eve/BetChip/assets/script/ChipManager.ts"],"names":["_decorator","Component","Node","Prefab","resources","instantiate","Vec3","tween","math","ChipConfig","AudioController","ccclass","property","ChipManager","radius","animationDuration","isChipsDisplayed","activeChips","start","selectedChip","on","EventType","TOUCH_START","onSelectedChipClick","closeSelection","audioController","playOnClose","playOnClick","selectedChipPosition","getPosition","chipComponent","getComponentInChildren","surroundingChips","filter","chip","value","chipValue","sort","a","b","forEach","index","loadAndAnimateChip","length","replaceChildNode","chipNode","children","child","destroy","addChild","setPosition","chipConfig","totalChips","centerPosition","load","prefabPath","err","prefab","node","push","startAngle","totalAngle","angle","toRadian","targetPosition","x","Math","cos","y","sin","z","delay","to","position","onComplete","target","easing","scale"],"mappings":"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","sourcesContent":["import {\n  _decorator,\n  Component,\n  Node,\n  Prefab,\n  resources,\n  instantiate,\n  Vec3,\n  tween,\n  math,\n} from 'cc';\nimport { ChipConfig } from './Config';\nimport { AudioController } from './AudioController';\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('ChipManager')\nexport class ChipManager extends Component {\n  @property(Node)\n  selectedChip: Node = null;\n\n  private radius: number = 100;\n  private animationDuration: number = 0.1;\n  private isChipsDisplayed: boolean = false;\n  private activeChips: Node[] = [];\n\n  @property(AudioController)\n  audioController: AudioController = null;\n\n  //initiate touch event\n  start() {\n    this.selectedChip.on(\n      Node.EventType.TOUCH_START,\n      this.onSelectedChipClick,\n      this\n    );\n  }\n\n  // when the center chip is clicked, display other chips surrounding it\n  onSelectedChipClick() {\n    if (this.isChipsDisplayed) {\n      this.closeSelection();\n      this.audioController.playOnClose();\n\n      return;\n    }\n    this.audioController.playOnClick();\n    this.isChipsDisplayed = true;\n    const selectedChipPosition = this.selectedChip.getPosition();\n    const chipComponent =\n      this.selectedChip.getComponentInChildren('ChipComponent');\n\n    const surroundingChips = ChipConfig.filter(\n      (chip) => chip.value !== chipComponent.chipValue\n    ).sort((a, b) => a.value - b.value);\n\n    surroundingChips.forEach((chip, index) => {\n      this.loadAndAnimateChip(\n        chip,\n        index,\n        surroundingChips.length,\n        selectedChipPosition\n      );\n    });\n  }\n\n  replaceChildNode(chipNode: Node) {\n    this.selectedChip.children.forEach((child) => {\n      if (child !== chipNode) {\n        child.destroy();\n      }\n    });\n\n    this.selectedChip.addChild(chipNode);\n    chipNode.setPosition(0, 0, 0);\n\n    this.activeChips = this.activeChips.filter((chip) => chip !== chipNode);\n  }\n\n  loadAndAnimateChip(\n    chipConfig: any,\n    index: number,\n    totalChips: number,\n    centerPosition: Vec3\n  ) {\n    resources.load(chipConfig.prefabPath, Prefab, (err, prefab) => {\n      const chipNode = instantiate(prefab);\n      chipNode.setPosition(centerPosition);\n      this.node.addChild(chipNode);\n      this.activeChips.push(chipNode);\n\n      const startAngle = 0;\n      const totalAngle = 180;\n      const angle = math.toRadian(\n        startAngle + (totalAngle / (totalChips - 1)) * (totalChips - 1 - index) // Flip the index to start from left to right\n      );\n\n      const targetPosition = new Vec3(\n        centerPosition.x + Math.cos(angle) * this.radius,\n        centerPosition.y + Math.sin(angle) * this.radius,\n        centerPosition.z\n      );\n\n      tween(chipNode)\n        .delay(index * 0.05)\n        .to(\n          this.animationDuration,\n          { position: targetPosition },\n          {\n            onComplete: (target?: object) => {\n              chipNode.on(\n                Node.EventType.TOUCH_START,\n                () => this.replaceChildNode(chipNode),\n                this\n              );\n            },\n          }\n        )\n        .start();\n    });\n  }\n\n  closeSelection() {\n    const selectedChipPosition = this.selectedChip.getPosition();\n    this.activeChips = this.activeChips.filter(\n      (chip) => chip !== this.selectedChip\n    );\n\n    this.activeChips.forEach((chip) => {\n      tween(chip)\n        .to(\n          this.animationDuration,\n          { position: selectedChipPosition },\n          { easing: 'cubicIn' }\n        )\n        .to(\n          0,\n          { scale: new Vec3(0, 0, 0) },\n          {\n            easing: 'cubicOut',\n            onComplete: () => {\n              chip.destroy();\n            },\n          }\n        )\n        .start();\n    });\n\n    // Clear the list\n    this.activeChips = [];\n    this.isChipsDisplayed = false;\n  }\n}\n"]}