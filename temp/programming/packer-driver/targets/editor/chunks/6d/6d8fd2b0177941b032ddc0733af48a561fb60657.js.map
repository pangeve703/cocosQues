{"version":3,"sources":["cce:/internal/x/prerequisite-imports"],"names":["requests","request","_err"],"mappings":";;;;;;AACA;AAEA,YAAM,CAAC,YAAY;AACf,cAAMA,QAAQ,GAAG,CAAC,uCAAD,EAAqL,uCAArL,EAAsW,uCAAtW,EAAihB,uCAAjhB,EAAqrB,uCAArrB,EAA+wB,uCAA/wB,EAAy2B,uCAAz2B,EAA47B,uCAA57B,EAAuhC,uCAAvhC,EAA+mC,uCAA/mC,EAAqsC,wCAArsC,EAAsxC,wCAAtxC,CAAjB;;AACA,aAAK,MAAMC,OAAX,IAAsBD,QAAtB,EAAgC;AAC5B,cAAI;AACA,kBAAMC,OAAO,EAAb;AACH,WAFD,CAEE,OAAOC,IAAP,EAAa,CACX;AACH;AACJ;AACJ,OATK,GAAN","sourcesContent":["\n// Auto generated represents the prerequisite imports of project modules.\n\nawait (async () => {\n    const requests = [() => import(\"file:///Applications/Cocos/Creator/3.8.4/CocosCreator.app/Contents/Resources/resources/3d/engine/editor/assets/default_renderpipeline/builtin-pipeline-settings.ts\"), () => import(\"file:///Applications/Cocos/Creator/3.8.4/CocosCreator.app/Contents/Resources/resources/3d/engine/editor/assets/default_renderpipeline/builtin-pipeline-types.ts\"), () => import(\"file:///Applications/Cocos/Creator/3.8.4/CocosCreator.app/Contents/Resources/resources/3d/engine/editor/assets/default_renderpipeline/builtin-pipeline.ts\"), () => import(\"file:///Applications/Cocos/Creator/3.8.4/CocosCreator.app/Contents/Resources/resources/3d/engine/editor/assets/tools/debug-view-runtime-control.ts\"), () => import(\"file:///Users/eve/chat-server/cocosQues/assets/script/AnimationScript.ts\"), () => import(\"file:///Users/eve/chat-server/cocosQues/assets/script/AudioController.ts\"), () => import(\"file:///Users/eve/chat-server/cocosQues/assets/script/BetAgain.ts\"), () => import(\"file:///Users/eve/chat-server/cocosQues/assets/script/BetZoneComponent.ts\"), () => import(\"file:///Users/eve/chat-server/cocosQues/assets/script/ChipComponent.ts\"), () => import(\"file:///Users/eve/chat-server/cocosQues/assets/script/ChipManager.ts\"), () => import(\"file:///Users/eve/chat-server/cocosQues/assets/script/Config.ts\"), () => import(\"file:///Users/eve/chat-server/cocosQues/assets/script/CountdownTimer.ts\")];\n    for (const request of requests) {\n        try {\n            await request();\n        } catch (_err) {\n            // The error should have been caught by executor.\n        }\n    }\n})();\n    "]}