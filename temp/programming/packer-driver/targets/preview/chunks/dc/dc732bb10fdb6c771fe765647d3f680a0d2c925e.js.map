{"version":3,"sources":["file:///Users/eve/BetChip/assets/script/CoinSelection.ts"],"names":["_decorator","Component","Node","Prefab","resources","instantiate","Vec3","tween","math","ChipConfig","ccclass","property","ChipManager","isChipsDisplayed","activeChips","isAnimating","start","selectedChip","on","EventType","TOUCH_START","onselectedChipClick","closeSelection","selectedChipPosition","getPosition","surroundingChips","filter","chip","value","getComponentInChildren","chipValue","sort","a","b","forEach","index","loadAndAnimateChip","length","replaceChildNode","chipNode","children","includes","child","destroy","addChild","setPosition","chipConfig","totalChips","centerPosition","load","prefabPath","err","prefab","console","error","node","push","startAngle","totalAngle","angle","toRadian","targetPosition","x","Math","cos","radius","y","sin","z","delay","to","animationDuration","position","onComplete","target","easing","scale"],"mappings":"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","sourcesContent":["import {\n  _decorator,\n  Component,\n  Node,\n  Prefab,\n  resources,\n  instantiate,\n  Vec3,\n  tween,\n  math,\n} from 'cc';\nimport { ChipConfig } from './Config';\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('ChipManager')\nexport class ChipManager extends Component {\n  @property(Node)\n  selectedChip: Node = null; // The default coin node\n\n  @property\n  radius: number = 100; // Distance from the default coin\n\n  @property\n  animationDuration: number = 0.5; // Animation duration\n\n  private isChipsDisplayed: boolean = false; // To prevent multiple displays\n  private activeChips: Node[] = []; // Track all instantiated chips\n  private isAnimating: boolean = false;\n\n  start() {\n    // Add click listener for the default coin\n    this.selectedChip.on(\n      Node.EventType.TOUCH_START,\n      this.onselectedChipClick,\n      this\n    );\n  }\n\n  onselectedChipClick() {\n    if (this.isAnimating) {\n      return; // If animation is in progress, ignore the click\n    }\n    if (this.isChipsDisplayed) {\n      this.closeSelection();\n      return;\n    }\n\n    this.isChipsDisplayed = true;\n\n    // Get the position of the default chip\n    const selectedChipPosition = this.selectedChip.getPosition();\n\n    // Exclude the selected chip and sort the remaining chips by value in ascending order\n    const surroundingChips = ChipConfig.filter(\n      (chip) =>\n        chip.value !==\n        this.selectedChip.getComponentInChildren('ChipComponent').chipValue\n    ).sort((a, b) => a.value + b.value);\n\n    // Create and animate each chip except the selected one\n    surroundingChips.forEach((chip, index) => {\n      this.loadAndAnimateChip(\n        chip,\n        index,\n        surroundingChips.length,\n        selectedChipPosition\n      );\n    });\n  }\n\n  replaceChildNode(chipNode: Node) {\n    if (this.selectedChip.children.includes(chipNode)) {\n      return;\n    }\n    // Destroy all children except the selected chipNode\n    this.selectedChip.children.forEach((child) => {\n      if (child !== chipNode) {\n        child.destroy();\n      }\n    });\n\n    this.selectedChip.addChild(chipNode);\n    chipNode.setPosition(0, 0, 0);\n\n    this.activeChips = this.activeChips.filter((chip) => chip !== chipNode);\n  }\n\n  loadAndAnimateChip(\n    chipConfig: any,\n    index: number,\n    totalChips: number,\n    centerPosition: Vec3\n  ) {\n    // Load the prefab dynamically\n    resources.load(chipConfig.prefabPath, Prefab, (err, prefab) => {\n      if (err) {\n        console.error(`Failed to load prefab: ${chipConfig.prefabPath}`, err);\n        return;\n      }\n\n      // Instantiate the prefab\n      const chipNode = instantiate(prefab);\n\n      // Set its initial position to the center (default coin position)\n      chipNode.setPosition(centerPosition);\n\n      // Parent the chip to the scene\n      this.node.addChild(chipNode);\n      this.activeChips.push(chipNode);\n\n      const startAngle = 0;\n      const totalAngle = 180;\n      const angle = math.toRadian(\n        startAngle + (totalAngle / (totalChips - 1)) * (totalChips - 1 - index) // Flip the index to start from left to right\n      );\n\n      const targetPosition = new Vec3(\n        centerPosition.x + Math.cos(angle) * this.radius,\n        centerPosition.y + Math.sin(angle) * this.radius,\n        centerPosition.z\n      );\n\n      tween(chipNode)\n        .delay(index * 0.05)\n        .to(\n          this.animationDuration,\n          { position: targetPosition },\n          {\n            onComplete: (target?: object) => {\n              chipNode.on(\n                Node.EventType.TOUCH_START,\n                () => this.replaceChildNode(chipNode),\n                this\n              );\n            },\n          }\n        )\n        .start();\n    });\n  }\n\n  closeSelection() {\n    const selectedChipPosition = this.selectedChip.getPosition();\n    this.activeChips = this.activeChips.filter(\n      (chip) => chip !== this.selectedChip\n    );\n\n    this.activeChips.forEach((chip) => {\n      tween(chip)\n        .to(\n          this.animationDuration,\n          { position: selectedChipPosition },\n          { easing: 'cubicIn' }\n        )\n        .to(\n          0,\n          { scale: new Vec3(0, 0, 0) },\n          {\n            easing: 'cubicOut',\n            onComplete: (target?: object) => {\n              chip.destroy();\n            },\n          }\n        )\n        .start();\n    });\n\n    // Clear the list after all animations\n    this.activeChips = [];\n    this.isChipsDisplayed = false;\n  }\n}\n"]}